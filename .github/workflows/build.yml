name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write
    env:
      NODE_OPTIONS: '--max-old-space-size=8192'
      SECRETS_DRIVER: aws-secrets-manager
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        if: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: gha-bedrock-${{ github.run_id }}
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Cache Electron native build assets
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-
      - name: Install dependencies
        run: npm ci
      - name: Ensure no static API secrets are set
        run: npm run security:static-secrets
      - name: Run verification suite
        run: npm run ci:verify
      - name: Run dependency vulnerability audit
        run: npm run security:audit
      - name: Validate dependency licenses
        run: npm run license:check

      - name: Generate SBOM
        run: npm run sbom:generate

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/bom.json

  build:
    if: github.event_name == 'push'
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    env:
      NODE_OPTIONS: '--max-old-space-size=8192' # メモリ制限を8GBに設定

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      - name: Ensure no static API secrets are set
        run: npm run security:static-secrets

      - name: Lint
        run: npm run lint
        env:
          ESLINT_USE_FLAT_CONFIG: true

      - name: Type check
        run: npm run typecheck

      - name: Run unit tests
        run: npm test -- --coverage

      - name: Build app
        run: npm run build:${{ matrix.os == 'windows-latest' && 'win' || 'mac' }}

  sast:
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci

  dast:
    runs-on: ubuntu-latest
    needs: verify
    permissions:
      contents: read
      id-token: write
    env:
      NODE_OPTIONS: '--max-old-space-size=8192'
      SECRETS_DRIVER: aws-secrets-manager
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        if: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: gha-bedrock-${{ github.run_id }}
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run dynamic smoke tests
        run: npm run dast

  container-scan:
    runs-on: ubuntu-latest
    needs: verify
    steps:
      - uses: actions/checkout@v4
      - name: Build runtime image
        run: docker build --target runner -t bedrock-engineer:runtime .
      - name: Scan runtime image
        uses: aquasecurity/trivy-action@v0.20.0
        with:
          image-ref: bedrock-engineer:runtime
          severity: HIGH,CRITICAL
          ignore-unfixed: true
